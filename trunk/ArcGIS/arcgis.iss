; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "KEA for ArcGIS"
#define MyAppVersion "1.4.7"
#define MyAppPublisher "Landcare Research NZ"
#define MyAppURL "http://kealib.org/"
#define MyOutputFilename "setup_kea_arcgis_" + GetDateTimeString('yyyymmdd', '', '')

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{F14E4CBA-4760-4F6C-AC19-9FBDF801A96A}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
LicenseFile=C:\dev\keainstall\LICENSE.txt
OutputDir=C:\dev\keainstall
OutputBaseFilename={#MyOutputFilename}
Compression=lzma
SolidCompression=yes
DefaultDirName={code:GetArcGISDir}
UsePreviousAppDir=no
AppendDefaultDirName=no
DirExistsWarning=no

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "C:\dev\arckea\dist\arc93\lib\gdalplugins\gdal_KEA.dll"; DestDir: "{app}\bin\gdalplugins"; Check: ArcVersion('9.3', '0'); Flags: ignoreversion
Source: "C:\dev\arckea\dist\arc100\lib\gdalplugins\gdal_KEA.dll"; DestDir: "{app}\bin\gdalplugins"; Check: ArcVersion('10.0', '0'); Flags: ignoreversion
Source: "C:\dev\arckea\dist\arc101\lib\gdalplugins\gdal_KEA.dll"; DestDir: "{app}\bin\gdalplugins"; Check: ArcVersion('10.1', '0'); Flags: ignoreversion
Source: "C:\dev\arckea\dist\arc104\x86\lib\gdalplugins\gdal_KEA.dll"; DestDir: "{app}\bin\gdalplugins"; Check: ArcVersion('10.4', '32'); Flags: ignoreversion
Source: "C:\dev\arckea\dist\arc104\x64\lib\gdalplugins\gdal_KEA.dll"; DestDir: "{app}\bin\gdalplugins"; Check: ArcVersion('10.4', '64'); Flags: ignoreversion
Source: "C:\dev\arckea\dist\arc105\x86\lib\gdalplugins\gdal_KEA.dll"; DestDir: "{app}\bin\gdalplugins"; Check: ArcVersion('10.5', '32'); Flags: ignoreversion
Source: "C:\dev\arckea\dist\arc105\x64\lib\gdalplugins\gdal_KEA.dll"; DestDir: "{app}\bin\gdalplugins"; Check: ArcVersion('10.5', '64'); Flags: ignoreversion
Source: "C:\dev\arckea\dist\arc1051\x86\lib\gdalplugins\gdal_KEA.dll"; DestDir: "{app}\bin\gdalplugins"; Check: ArcVersion('10.5.1', '32'); Flags: ignoreversion
Source: "C:\dev\arckea\dist\arc1051\x64\lib\gdalplugins\gdal_KEA.dll"; DestDir: "{app}\bin\gdalplugins"; Check: ArcVersion('10.5.1', '64'); Flags: ignoreversion

[code]
const
  // this is where ArcGIS seems to put the install information
  ArcSubKey = 'SOFTWARE\Wow6432Node\ESRI';
  // info that needs to go in RasterFormats.dat
  ArcKEAFmtLine = '<e on="y" nm="KEA" ex="*.kea" et="KEA" at="0x27" />';
var
  // these global vars are set by GetArcGISDir() and checked by ArcVersion()
  ArcVersionClass : string; // one of: 9.3, 10.0, 10.1, 10.4, 10.5, 10.5.1
  ArcRealVersion : string; // the contents of the "RealVersion" key
  Is64BitArc : boolean;  // the contents of the "64Bit" key

// For calling from Check: above
// bits parameter is '0' for don't care or '32' or '64'
// ideally would have used enums but that doesn't seem to work when calling from Check:
function ArcVersion(versionClass, bits: string): boolean;
begin
  Result := False;
  if versionClass = ArcVersionClass then
    // matches the version class
    if bits = '0' then
      Result := True // always match
    else if bits = '32' then
      Result := not Is64BitArc
    else if bits = '64' then
      Result := Is64BitArc
    else
      MsgBox('Unknown number of bits ' + bits, mbInformation, MB_OK)
end;

// forward declarations
function CompareVersion(V1, V2: string): Integer; forward;
function GetArcVersionClass(realVersion: string): string; forward;

// get the dir of ArcGIS and fill in global variables
function GetArcGISDir(Value: string): string;
var
  ArcNames : TArrayOfString;
  I : Integer;
  S : String;
  currSubKey : String;
begin
  Result := ''; // not sure what a suitable default is...
  ArcRealVersion := '0.0';
  ArcVersionClass := '';
  Is64BitArc := False;
  // look at all the subkeys of ArcSubKey and choose the best one
  if RegGetSubkeyNames(HKEY_LOCAL_MACHINE, ArcSubKey, ArcNames) then
  begin
    for I := 0 to GetArrayLength(ArcNames)-1 do
    begin
       // only process keys that start with 'Desktop'. TODO: correct?
      if Pos('Desktop', ArcNames[I]) = 1 then
      begin
        currSubKey := ArcSubKey + '\' + ArcNames[I];
        if RegQueryStringValue(HKEY_LOCAL_MACHINE, currSubKey, 'RealVersion', S) then
        begin
          if CompareVersion(ArcRealVersion, S) = -1 then
          begin
            // it's the most recent version
            // get the install dir
            if RegQueryStringValue(HKEY_LOCAL_MACHINE, currSubKey, 'InstallDir', Result) then
            begin
              ArcRealVersion := S;
              ArcVersionClass := GetArcVersionClass(ArcRealVersion);
              if ArcVersionClass = '' then
              begin
                MsgBox('Unsupported ArcGIS Version ' + ArcRealVersion, mbCriticalError, MB_OK);
                Result := '';
              end;

              if RegQueryStringValue(HKEY_LOCAL_MACHINE, currSubKey, '64Bit', S) then
              begin
                Is64BitArc := S = 'True';
              end;
            end;
          end;
        end;
      end;
    end;
  end;

  if Result = '' then
    MsgBox('Failed to read ArcGIS Install info', mbCriticalError, MB_OK)
  else
    MsgBox('successfully read ' + Result + ' ' + ArcRealVersion, mbInformation, MB_OK)
end;

// run after the files have been copied. Updates the RasterFormats.dat
procedure CurStepChanged(CurStep: TSetupStep);
var
  rfpath : string;
begin
  if CurStep = ssPostInstall then
  begin
    rfpath := ExpandConstant('{app}\bin\RasterFormats.dat');
    // TODO: check it is already there??
    SaveStringToFile(rfpath, #13#10 + ArcKEAFmtLine + #13#10, True);
  end;
end;

// convert from the arc version string to one of the version classes we recognise
function GetArcVersionClass(realVersion: string): string;
begin
  if (CompareVersion(realVersion, '9.3') <> -1) and (CompareVersion(realVersion, '9.4') = -1) then
    Result := '9.3'
  else if (CompareVersion(realVersion, '10.0') <> -1) and (CompareVersion(realVersion, '10.1') = -1) then
    Result := '10.0'
  else if (CompareVersion(realVersion, '10.1') <> -1) and (CompareVersion(realVersion, '10.4') = -1) then
    Result := '10.1'
  else if (CompareVersion(realVersion, '10.4') <> -1) and (CompareVersion(realVersion, '10.5') = -1) then
    Result := '10.4'
  else if (CompareVersion(realVersion, '10.5') <> -1) and (CompareVersion(realVersion, '10.5.1') = -1) then
    Result := '10.5'
  else if (CompareVersion(realVersion, '10.5.1') <> -1) and (CompareVersion(realVersion, '10.6') = -1) then
    Result := '10.5.1'
  else
    Result := ''
end;

// From: https://stackoverflow.com/questions/37825650/compare-version-strings-in-inno-setup
function CompareVersion(V1, V2: string): Integer;
var
  P, N1, N2: Integer;
begin
  Result := 0;
  while (Result = 0) and ((V1 <> '') or (V2 <> '')) do
  begin
    P := Pos('.', V1);
    if P > 0 then
    begin
      N1 := StrToInt(Copy(V1, 1, P - 1));
      Delete(V1, 1, P);
    end
      else
    if V1 <> '' then
    begin
      N1 := StrToInt(V1);
      V1 := '';
    end
      else
    begin
      N1 := 0;
    end;

    P := Pos('.', V2);
    if P > 0 then
    begin
      N2 := StrToInt(Copy(V2, 1, P - 1));
      Delete(V2, 1, P);
    end
      else
    if V2 <> '' then
    begin
      N2 := StrToInt(V2);
      V2 := '';
    end
      else
    begin
      N2 := 0;
    end;

    if N1 < N2 then Result := -1
      else
    if N1 > N2 then Result := 1;
  end;
end;
