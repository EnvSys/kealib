
const
  // info that needs to go in RasterFormats.dat
  ArcKEAFmtLine = '<e on="y" nm="KEA" ex="*.kea" et="KEA" at="0x27" />';

// updates RasterFormats.dat
procedure UpdateRasterFormats(rfpath: String);
var
  lines : TArrayOfString;
  I : Integer;
  found : Boolean;
begin
  found := False;
  // check it isn't already there
  if LoadStringsFromFile(rfpath, lines) then
  begin
    for I := 0 to GetArrayLength(lines)-1 do
	begin
      if Pos(ArcKEAFmtLine, lines[I]) <> 0 then
      begin
        found := True;
        Break;
      end;
    end;
  end;
	
  if not found then
    SaveStringToFile(rfpath, #13#10 + ArcKEAFmtLine + #13#10, True)
end;

// run after the files have been copied. Updates the RasterFormats.dat
procedure CurStepChanged(CurStep: TSetupStep);
var
  rfpath : string;
begin
  if CurStep = ssPostInstall then
  begin
    rfpath := ExpandConstant('{app}\bin\RasterFormats.dat');
    UpdateRasterFormats(rfpath);
    
    // bin64 there also?
    rfpath := ExpandConstant('{app}\bin64\RasterFormats.dat');
    if FileExists(rfpath) then
    begin
      UpdateRasterFormats(rfpath);
    end;
  end;
end;

// From: https://stackoverflow.com/questions/37825650/compare-version-strings-in-inno-setup
function CompareVersion(V1, V2: string): Integer;
var
  P, N1, N2: Integer;
begin
  Result := 0;
  while (Result = 0) and ((V1 <> '') or (V2 <> '')) do
  begin
    P := Pos('.', V1);
    if P > 0 then
    begin
      N1 := StrToInt(Copy(V1, 1, P - 1));
      Delete(V1, 1, P);
    end
      else
    if V1 <> '' then
    begin
      N1 := StrToInt(V1);
      V1 := '';
    end
      else
    begin
      N1 := 0;
    end;

    P := Pos('.', V2);
    if P > 0 then
    begin
      N2 := StrToInt(Copy(V2, 1, P - 1));
      Delete(V2, 1, P);
    end
      else
    if V2 <> '' then
    begin
      N2 := StrToInt(V2);
      V2 := '';
    end
      else
    begin
      N2 := 0;
    end;

    if N1 < N2 then Result := -1
      else
    if N1 > N2 then Result := 1;
  end;
end;
