
const
  // info that needs to go in RasterFormats.dat
  ArcKEAFmtLine = '<e on="y" nm="KEA" ex="*.kea" et="KEA" at="0x2f" />';

// updates RasterFormats.dat
procedure UpdateRasterFormats(rfpath: String);
var
  lines : TArrayOfString;
  I : Integer;
  found : Boolean;
  Stream : TFileStream;
  data : String;
  W : Word;
begin
  found := False;
  // check it isn't already there
  if LoadStringsFromFile(rfpath, lines) then
  begin
    for I := 0 to GetArrayLength(lines)-1 do
	begin
      // just search for part of ArcKEAFmtLine as we may have changed the flags, formatting etc
      if Pos('nm="KEA"', lines[I]) <> 0 then
      begin
        found := True;
        Break;
      end;
    end;
  end;

  if not found then
  begin
    // extra check - read the last byte and see if it is #13#10
    // so we can add it before ArcKEAFmtLine if needed. LoadStringsFromFile
    // seems to strip out these characters
    Stream := TFileStream.Create(rfpath, fmOpenRead);
    try
      // confusingly Strings and unicode
      Stream.Seek(-2, soFromEnd);
      SetLength(data, 1);
	  Stream.ReadBuffer(data, 2);
    finally
      Stream.Free;
    end;
  
    W := Ord(data[1]);
    //Log(Format('Data is %d %d %d', [W, Byte(W), Byte(W shr 8)]));
  
    // Need to convert from Unicode char back to bytes
    if (Byte(W) <> 13) or (Byte(W shr 8) <> 10) then
    begin
	  //Log('Writing newline');
	  SaveStringToFile(rfPath, #13#10, True);
    end;
	
    SaveStringToFile(rfpath, ArcKEAFmtLine + #13#10, True)
  end;
end;

// From: https://stackoverflow.com/questions/37825650/compare-version-strings-in-inno-setup
function CompareVersion(V1, V2: string): Integer;
var
  P, N1, N2: Integer;
begin
  Result := 0;
  while (Result = 0) and ((V1 <> '') or (V2 <> '')) do
  begin
    P := Pos('.', V1);
    if P > 0 then
    begin
      N1 := StrToInt(Copy(V1, 1, P - 1));
      Delete(V1, 1, P);
    end
      else
    if V1 <> '' then
    begin
      N1 := StrToInt(V1);
      V1 := '';
    end
      else
    begin
      N1 := 0;
    end;

    P := Pos('.', V2);
    if P > 0 then
    begin
      N2 := StrToInt(Copy(V2, 1, P - 1));
      Delete(V2, 1, P);
    end
      else
    if V2 <> '' then
    begin
      N2 := StrToInt(V2);
      V2 := '';
    end
      else
    begin
      N2 := 0;
    end;

    if N1 < N2 then Result := -1
      else
    if N1 > N2 then Result := 1;
  end;
end;
